name: Flutter Package Workflow

on:
  workflow_call:
    inputs:
      analyze_directories:
        required: false
        type: string
        default: "integration_test"
      concurrency:
        required: false
        type: number
        default: 4
      # coverage_excludes:
      #   required: false
      #   type: string
      #   default: "lib/firebase_options_development.dart lib/l10n/l10n.dart lib/bootstrap.dart lib/shared/helper/get_it_service_locator.dart lib/shared/constants/theme_constant.dart lib/shared/constants/variables_constant.dart lib/shared/constants/* *.g.dart *.freezed.dart lib/shared/navigation/* lib/shared/data_provider/* */blocprovider/*.dart lib/shared/widget/card_add_image_widget.dart lib/shared/widget/image_widget.dart lib/shared/widget/user_photo_widget.dart"
      flutter_channel:
        required: false
        type: string
        default: "stable"
      flutter_version:
        required: false
        type: string
        default: "3.22.0"
      # format_directories:
      #   required: false
      #   type: string
      #   default: "lib test"
      # format_line_length:
      #   required: false
      #   type: string
      #   default: "80"
      # min_coverage:
      #   required: false
      #   type: number
      #   default: 100
      runs_on:
        required: false
        type: string
        default: "ubuntu-latest"
      # setup:
      #   required: false
      #   type: string
      #   default: ""
      test_optimization:
        required: false
        type: boolean
        default: true
      test_recursion:
        required: false
        type: boolean
        default: false
      working_directory:
        required: false
        type: string
        default: "."
      package_get_excludes:
        required: false
        type: string
        default: "!*"
    secrets:
      ssh_key:
        required: false
env:
  GITHUB_OUTPUT: ${{github.workspace}}/.github/workflows/output.txt
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
permissions:
  id-token: write # This is required for requesting the JWT
  contents: write # This is required for actions/checkout

jobs:
  #  build_coverage:
  #    timeout-minutes: 30
  #    defaults:
  #      run:
  #        working-directory: ${{inputs.working_directory}}
  #    runs-on: ${{inputs.runs_on}}
  #    steps:
  #
  #      - uses: actions/checkout@v4.1.1
  #      - uses: subosito/flutter-action@v2.12.0
  #        with:
  #          channel: 'stable'
  #          cache: true
  #          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:' # optional, change this to force refresh cache
  #          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:' # optional, change this to specify the cache path
  #          architecture: x64 # optional, x64 or arm64
  #          flutter-version: ${{inputs.flutter_version}}
  #      - name: üì¶ Install Dependencies
  #        run: |
  #          flutter pub get
  #      - run: |
  #          flutter pub run build_runner build --delete-conflicting-outputs
  #
  #      - name: ‚öôÔ∏è Run Setup
  #        if: "${{inputs.setup != ''}}"
  #        run: ${{inputs.setup}}
  #
  #      - name: ‚ú® Check Formatting
  #        run: dart format --line-length ${{inputs.format_line_length}} --set-exit-if-changed ${{inputs.format_directories}}
  #      - name: Install lcov
  #        run: sudo apt-get install -y lcov
  #      - name: üïµÔ∏è Analyze
  #        run: flutter analyze ${{inputs.analyze_directories}}
  #
  #      - name: üß™ Run Tests and Generate Coverage Report
  #        run: |
  #          flutter test --coverage -j ${{inputs.concurrency}} --test-randomize-ordering-seed random
  #          lcov --capture --directory . --output-file coverage/lcov.info
  #          genhtml coverage/lcov.info --output-directory coverage/html
  #          flutter pub global activate coverage
  #          flutter pub global run coverage:format_coverage --lcov --in=coverage/lcov.info --out=coverage/coverage.xml --packages=.packages --report-on=lib
  #
  #      - name: Install diff-cover
  #        run: pip install diff-cover
  #
  #      - name: üìä Check Code Coverage for Changed Code
  #        run: diff-cover --compare-branch=${{ github.base_ref }} coverage/coverage.xml --fail-under=80
  #
  #      - name: üìä Check Code Coverage
  #        uses: VeryGoodOpenSource/very_good_coverage@v2
  #        with:
  #          path: ${{inputs.working_directory}}/coverage/lcov.info
  #          exclude: ${{inputs.coverage_excludes}}
  #          min_coverage: ${{inputs.min_coverage}}

  #  integration-android:
  #    needs:
  #      - build
  #      - integration-web-chrome
  #    timeout-minutes: 15
  ##    runs-on: ${{inputs.runs_on}}
  #    runs-on: buildjet-2vcpu-ubuntu-2204
  #    strategy:
  #      matrix:
  #        api-level: [ 29 ]
  #        target: [ default ]
  #        arch: [ x86_64 ]
  #    steps:
  #      - uses: actions/checkout@v4.1.1
  #      - uses: subosito/flutter-action@v2.12.0
  #        with:
  #          channel: 'stable'
  #          cache: true
  #          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:' # optional, change this to force refresh cache
  #          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:' # optional, change this to specify the cache path
  #          architecture: x64 # optional, x64 or arm64
  #          flutter-version: ${{inputs.flutter_version}}
  #      - name: Flutter Pub Get # get flutter packages information
  #        run: flutter pub get
  #      - name: Flutter code generation # generate any missing code from source code
  #        run: flutter pub run build_runner build --delete-conflicting-outputs
  #      - name: Android Emulator Runner
  #        uses: ReactiveCircus/android-emulator-runner@v2.28.0
  #        with:
  #          api-level: ${{ matrix.api-level }}
  #          target: ${{ matrix.target }}
  #          arch: ${{ matrix.arch }}
  #          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
  #          force-avd-creation: false
  #          script: flutter test integration_test --flavor development
  #
  #      - name: Upload artifact
  #        uses: actions/upload-artifact@v2
  #        with:
  #          name: e2e_output
  #          path: e2e_output.log
  integration-web-chrome:
    timeout-minutes: 15
    needs:
      - build
    runs-on: ${{inputs.runs_on}}
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: subosito/flutter-action@v2.12.0
        with:
          channel: "stable"
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:" # optional, change this to force refresh cache
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path
          architecture: x64 # optional, x64 or arm64
          flutter-version: ${{inputs.flutter_version}}
      - name: Flutter Pub Get # get flutter packages information
        run: flutter pub get
      - run: |
          flutter pub run build_runner build --delete-conflicting-outputs
      - name: Check Chrome Version
        id: chrome-version
        run: |
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}')
          echo "Chrome Version: $CHROME_VERSION"
          echo "::set-output name=chrome-version::$CHROME_VERSION"

      - name: Setup Chromedriver
        uses: nanasess/setup-chromedriver@v2
        with:
          chromedriver-version: ${{ steps.chrome-version.outputs.chrome-version }}

      - name: Run Chromedriver and Integration Tests
        run: |
          chromedriver --port=4444 --trace-buffer-size=100000 &
          chmod +x integration_tests.sh && ./integration_tests.sh
  #  integration-web-edge:
  #    timeout-minutes: 15
  #    needs:
  #      - build
  #    runs-on: ${{inputs.runs_on}}
  #    steps:
  #      - uses: actions/checkout@v4.1.1
  #      - uses: subosito/flutter-action@v2.12.0
  #        with:
  #          channel: 'stable'
  #          cache: true
  #          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:' # optional, change this to force refresh cache
  #          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:' # optional, change this to specify the cache path
  #          architecture: x64 # optional, x64 or arm64
  #          flutter-version: ${{inputs.flutter_version}}
  #      - name: Flutter Pub Get # get flutter packages information
  #        run: flutter pub get
  #      - uses: browser-actions/setup-edge@v1.1.0
  #      - name: Print Edge version
  #        run: (Get-Item (Get-Command msedge).Source).VersionInfo.ProductVersion
  #
  #
  #      - name: Run Chromedriver and Integration Tests
  #        run: |
  #          chromedriver --port=4444 --trace-buffer-size=100000 &
  #          chmod +x integration_tests.sh && ./integration_tests.sh
  #  integration-web-macos:
  #    timeout-minutes: 15
  #    needs:
  #      - build
  #    runs-on: 'macos-latest'
  #    steps:
  #      - uses: actions/checkout@v4.1.1
  #      - uses: subosito/flutter-action@v2.12.0
  #        with:
  #          channel: 'stable'
  #          cache: true
  #          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:' # optional, change this to force refresh cache
  #          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:' # optional, change this to specify the cache path
  #          architecture: x64 # optional, x64 or arm64
  #          flutter-version: ${{inputs.flutter_version}}
  #      - name: Flutter Pub Get # get flutter packages information
  #        run: flutter pub get
  #      - uses: browser-actions/setup-edge@v1.1.0
  #
  #      - name: Run Safari driver and Integration Tests
  #        run: |
  #          ./usr/bin/safaridriver  --port=4444 --trace-buffer-size=100000 &
  #          chmod +x integration_tests.sh && ./integration_tests.sh
